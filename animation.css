/* html,
body {
    height: 100%;
}

body {
    --fps: 24;
    background: #EEE;
    overflow: hidden;
}

.sprites {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    overflow: hidden;
    display: none;
    width: var(--width);
    height: var(--height);

    >img {
        position: absolute;
        transform: translateZ(0);
        top: 0;
        left: 0;
        animation: calc(var(--frames) / var(--fps) * 1s) var(--keyframes) infinite step-end;
    }
}


input {
    @for $i from 1 through 4 {
        &#s#{$i}:checked {
            ~label:nth-of-type(#{$i}) {
                box-shadow: 2px 4px rgba(0, 0, 0, .1) inset, 0 0 0 200px rgba(0, 0, 0, .2) inset;
            }

            ~.sprites .sprite:nth-child(#{$i}) {
                display: block;
            }
        }
    }
}

label {
    display: inline-block;
    background: #15B0ED;
    color: #FFF;
    padding: .6em 1em;
    margin: .5em;
    border-radius: 5px;
    box-shadow: 0 -4px rgba(0, 0, 0, .2) inset;
    cursor: pointer;

    &:hover { background: #34BDEF;
    }
}

$catSprite: (
    W:408,
    H:199,
    rows:13,
    cols:1,
    frames:13
);

@mixin spriteKeyframes($s, $mode) {
    calc the "jump" relative to number of frames
    $jump: 100 / (map-get($s, frames));
    frame index
    $frame: 0;

    $rows: if($mode =="vertical", map-get($s, cols) + 1, map-get($s, rows) + 1);
    $cols: if($mode =="vertical", map-get($s, rows) + 1, map-get($s, cols) + 1);

    @if map-get($s, startFrame) > 0 {
    }

    @for $row from 1 to $rows {
        @for $col from 1 to $cols {
            $frame : $frame + 1;

            #{$frame * $jump}% {
                top :#{($row - 1) * map-get($s, H) * -1 + 'px'};
                left:#{($col - 1) * map-get($s, W) * -1 + 'px'};
            }
        }
    }
}

    .catSprite {
        --width: 408px;
        --height: 199px;
        --frames: 13;
        --keyframes: catSpriteAnim;
        margin: 0;
        right: 0;
        left: auto;
        top: auto;
        bottom: -2%;
        animation: 1.5s catSprint infinite linear;
    }

    @keyframes catSpriteAnim {
        @include spriteKeyframes($catSprite, null);
    }

    @keyframes catSprint {
        0% {
            right: 0;
            transform: translateX(100%);
        }

        70%,
        100% {
            right: 100%;
            transform: none;
        }
    } */

    /* .moon {
    width: 250px;
    height: 250px;
    bottom: 35%;
    border-radius: 1px solod rgba (0.0.0.0.3);
    position: absolute;
    border-radius: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #d8d8d8;
    box-shadow: inset 15px 15 10px #999;
    display: block;
} */

    /* .panda {
    position: absolute;
    top: 10%;
    left: 50%;
    border-bottom-style: 35%;
    background: transparent url('./animation/animation.png') 0 0 no-repeat;
    width: 178px;
    height: 155px;
    transform: translate(-50%, 100%);
    margin: 2em auto;
    animation: walker 1s steps(4) infinite;
}

@keyframes: walker {
    from {background-position: 0 0;}
    to {background-position: 0 -4000px}
}


.p loading {
    width: 100%;
    height: 10px;
    font-family: 'monospace';
    position: absolute;
    left: 0;
    bottom: -50px;
    color: #4c4c4c;
    font-size: 20px;
    text-shadow: 1px 1px 1px #737373;
    text-align: center;
}

input.left, input.right,
span.left, span.right {
    position: absolute;
    top:-20px;
    width: 20px;
    height: 20px;
    cursor: pointer;
    z-index: 20;

}

span.left, span.right {
    pointer-events: none;
    color: #4c4c4c;
    font-size: 20px;
    text-shadow: 1px 1px 1px #737373;
}

input.left, span.left {
    left:0;

}
input.right, span.right {
    right:0;
}

input.left, input.right {
    opacity: 0;
}

.left:checked ~ .dog {
    transform: translate(-50% -50%) rotateY(180deg);
} */



    .sprite {
    width: 245px;
    height: 400px;
    display: block;
    background: transparent url(https://s.cdpn.io/13034/walker.png) 0 0 no-repeat;
    margin: 3em auto;
    animation: walker 1s steps(5) infinite;

}
@keyframes walker {
    from {background-position: 0 0;}
    to {background-position: 0 -4000px;}
}